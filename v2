<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map Notes App</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        body { margin: 0; padding: 0; }
        #map { height: 100vh; width: 100%; }
        .note-form {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            display: none;
            z-index: 1000;
        }
        .controls {
            position: fixed;
            top: 10px;
            right: 10px;
            background: white;
            padding: 10px;
            border-radius: 4px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            z-index: 1000;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <div class="controls">
        <button onclick="exportNotes()">Export GeoJSON</button>
    </div>
    
    <div id="noteForm" class="note-form">
        <h3>Add/Edit Note</h3>
        <input type="hidden" id="noteId">
        <textarea id="noteText" rows="4" cols="30" placeholder="Enter your note"></textarea><br>
        <button onclick="saveNote()">Save</button>
        <button onclick="deleteNote()">Delete</button>
        <button onclick="closeNoteForm()">Cancel</button>
    </div>

    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        let map;
        let userMarker;
        let watchId;
        let notes = [];
        let currentLat, currentLng;
        let editingNoteId = null;

        // Initialize map
        function initMap() {
            map = L.map('map').setView([0, 0], 2);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Â© OpenStreetMap contributors'
            }).addTo(map);

            // Add click event to map
            map.on('click', function(e) {
                currentLat = e.latlng.lat;
                currentLng = e.latlng.lng;
                showNoteForm();
            });

            // Request location permission and start tracking
            if ("geolocation" in navigator) {
                navigator.permissions.query({ name: 'geolocation' }).then(function(result) {
                    if (result.state === 'granted') {
                        startTracking();
                    } else {
                        requestLocationPermission();
                    }
                });
            }
        }

        // Request location permission
        function requestLocationPermission() {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    startTracking();
                },
                function(error) {
                    console.error("Error getting location:", error);
                },
                { enableHighAccuracy: true }
            );
        }

        // Start tracking location
        function startTracking() {
            watchId = navigator.geolocation.watchPosition(
                function(position) {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    
                    if (!userMarker) {
                        userMarker = L.marker([lat, lng]).addTo(map);
                        map.setView([lat, lng], 15);
                    } else {
                        userMarker.setLatLng([lat, lng]);
                        map.panTo([lat, lng]);
                    }
                },
                function(error) {
                    console.error("Error tracking location:", error);
                },
                { enableHighAccuracy: true }
            );
        }

        // Show note form
        function showNoteForm() {
            document.getElementById('noteForm').style.display = 'block';
            document.getElementById('noteText').value = '';
            document.getElementById('noteId').value = '';
        }

        // Close note form
        function closeNoteForm() {
            document.getElementById('noteForm').style.display = 'none';
            editingNoteId = null;
        }

        // Save note
        function saveNote() {
            const noteText = document.getElementById('noteText').value;
            const noteId = document.getElementById('noteId').value;
            
            if (noteId) {
                // Edit existing note
                const note = notes.find(n => n.id === noteId);
                if (note) {
                    note.properties.description = noteText;
                    note.properties.updatedAt = new Date().toISOString();
                    updateNoteMarker(note);
                }
            } else {
                // Create new note
                const newNote = {
                    type: "Feature",
                    id: Date.now().toString(),
                    geometry: {
                        type: "Point",
                        coordinates: [currentLng, currentLat]
                    },
                    properties: {
                        description: noteText,
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString()
                    }
                };
                notes.push(newNote);
                addNoteToMap(newNote);
            }
            
            closeNoteForm();
        }

        // Delete note
        function deleteNote() {
            const noteId = document.getElementById('noteId').value;
            if (noteId) {
                notes = notes.filter(note => note.id !== noteId);
                map.eachLayer((layer) => {
                    if (layer.noteId === noteId) {
                        map.removeLayer(layer);
                    }
                });
            }
            closeNoteForm();
        }

        // Add note marker to map
        function addNoteToMap(note) {
            const marker = L.marker([note.geometry.coordinates[1], note.geometry.coordinates[0]])
                .addTo(map);
            marker.noteId = note.id;
            
            marker.bindPopup(`
                <strong>Created:</strong> ${new Date(note.properties.createdAt).toLocaleString()}<br>
                <strong>Note:</strong> ${note.properties.description}<br>
                <button onclick="editNote('${note.id}')">Edit</button>
            `);
        }

        // Update note marker
        function updateNoteMarker(note) {
            map.eachLayer((layer) => {
                if (layer.noteId === note.id) {
                    layer.setPopupContent(`
                        <strong>Created:</strong> ${new Date(note.properties.createdAt).toLocaleString()}<br>
                        <strong>Updated:</strong> ${new Date(note.properties.updatedAt).toLocaleString()}<br>
                        <strong>Note:</strong> ${note.properties.description}<br>
                        <button onclick="editNote('${note.id}')">Edit</button>
                    `);
                }
            });
        }

        // Edit note
        function editNote(noteId) {
            const note = notes.find(n => n.id === noteId);
            if (note) {
                document.getElementById('noteId').value = noteId;
                document.getElementById('noteText').value = note.properties.description;
                document.getElementById('noteForm').style.display = 'block';
                editingNoteId = noteId;
            }
        }

        // Export notes as GeoJSON
        function exportNotes() {
            const geojson = {
                type: "FeatureCollection",
                features: notes
            };
            
            const blob = new Blob([JSON.stringify(geojson, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'map-notes.geojson';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Initialize the map when page loads
        window.onload = initMap;
    </script>
</body>
</html>
